{"version":3,"file":"static/js/843.2e4de6ed.chunk.js","mappings":"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","sources":["components/Button.js","components/styles.js","pages/Temp.js","webpack://celebration-calendar/./src/components/Button.js?ee67","webpack://celebration-calendar/./src/components/styles.js?5064","webpack://celebration-calendar/./src/pages/Temp.js?3893"],"sourcesContent":["import { memo } from 'react'\nimport { Link } from 'react-router-dom'\nimport { styled } from 'linaria/react'\n\nconst Wrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n`\n\nconst StyledButton = styled(Link)`\n\tcolor: var(--inputBg);\n\tbackground: var(--linkActive);\n\tborder: 2px solid var(--inputBorder);\n\tfont-weight: 700;\n\tborder-radius: 8px;\n\ttext-align: center;\n\tdisplay: inline-block;\n\n\t&:hover {\n\t\tcolor: var(--inputBg);\n\t\tbackground: var(--linkHover);\n\t}\n\n\tmargin: 8px;\n\tfont-size: 20px;\n\tpadding: 8px 16px;\n\tmin-width: 175px;\n\n\ttext-decoration: none;\n\tcursor: pointer;\n`\n\nconst Button = props => {\n\tconst isLink = !!props.to || !!props.href\n\tconst isButton = props.type === 'submit'\n\n\tconst as = isLink ? Link : isButton ? 'button' : 'div'\n\treturn (\n\t\t<Wrapper onClick={() => {}}>\n\t\t\t<StyledButton as={as} {...props} />\n\t\t</Wrapper>\n\t)\n}\n\nexport default memo(Button)\n","import { styled } from 'linaria/react'\n\nexport const NonScrollWrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin: 0;\n\tpadding: 0 16px;\n\twidth: 100%;\n\talign-items: center;\n\tflex: 0;\n`\n\nexport const PageTitle = styled.h2`\n\tmargin: 8px 0px 16px 0px;\n`\n\nexport const List = styled.ul`\n\tmargin: 0px;\n\tpadding-inline-start: 0px;\n\ttext-align: center;\n`\n\nexport const ListItem = styled.li`\n\tmargin-bottom: 16px;\n\tlist-style: none;\n`\n\nexport const Section = styled.div`\n\tmargin-bottom: 32px;\n\ttext-align: center;\n`\n","import { memo, useCallback, useMemo, useState } from 'react'\nimport { useDatabase, useDatabaseListData, useDatabaseObjectData } from 'reactfire'\nimport { equalTo, orderByValue, query, ref, set } from 'firebase/database'\nimport { styled } from 'linaria/react'\n\nimport Button from 'components/Button'\n// import { useEventContext } from 'context/EventContext'\nimport { NonScrollWrapper } from 'components/styles'\n\nconst Row = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n`\n\nconst Divider = styled.hr`\n\twidth: 100%;\n\tborder-color: red;\n`\n\nconst events = ['event1', 'event2', 'event3', 'event4', 'event5']\nconst users = ['user1', 'user2', 'user3', 'user4']\n\nconst Temp = () => {\n\t// const { data: user } = useUser()\n\n\tconst [user, setUser] = useState(users[0])\n\t// const [state] = useEventContext()\n\n\tconst database = useDatabase()\n\n\t// ============================================================\n\n\t// User Favorites Query\n\tconst userFavQ = useMemo(() => {\n\t\tconst userFavRef = ref(database, `temp-favorites/${user}`)\n\t\tconst userFavQuery = query(userFavRef, orderByValue())\n\t\treturn query(userFavQuery, equalTo('true'))\n\t}, [database, user])\n\n\t// User Favorites Resp\n\tconst userFavResp = useDatabaseObjectData(userFavQ, {})\n\n\t// User Favorite\n\tconst userFaves = useMemo(() => {\n\t\tif (userFavResp?.status !== 'success' || !userFavResp?.data) return []\n\t\treturn Object.keys(userFavResp?.data) || []\n\t}, [userFavResp?.data, userFavResp?.status])\n\n\t// ============================================================\n\n\t// Add/Remove User Favorite\n\tconst toggleFavorite = useCallback(\n\t\t(id, newState) => {\n\t\t\tconst userFavRef = ref(database, `temp-favorites/${user}/${id}`)\n\t\t\t// set(userFavRef, `${newState}`)\n\t\t\tset(userFavRef, newState ? 'true' : null)\n\t\t\t// console.log('SET', { id, newState })\n\t\t},\n\t\t[database, user]\n\t)\n\n\t// ============================================================\n\n\t// All Favorites Resp\n\tconst allFavRef = ref(database, `temp-favorites`)\n\tconst allFavResp = useDatabaseListData(allFavRef, {\n\t\tidField: 'id',\n\t})\n\t// All Favorites Count\n\tconst allFaves = useMemo(() => {\n\t\tif (allFavResp?.status !== 'success' || !allFavResp?.data) return []\n\t\treturn allFavResp.data.reduce((memo, user) => {\n\t\t\t// console.log('USER', { user })\n\t\t\tObject.keys(user).forEach(key => {\n\t\t\t\tif (user[key] === 'true') {\n\t\t\t\t\tmemo[key] = Number(memo[key] ?? null) + 1\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn memo\n\t\t}, {})\n\t}, [allFavResp?.data, allFavResp?.status])\n\n\t// ============================================================\n\n\t// HELPERS\n\tconst log = useCallback(() => {\n\t\tconsole.log('allFavResp.data', allFavResp)\n\t}, [allFavResp])\n\n\treturn (\n\t\t<NonScrollWrapper>\n\t\t\t{/*  */}\n\t\t\t<Row>\n\t\t\t\t{users.map(u => (\n\t\t\t\t\t<Button key={u} onClick={() => setUser(u)}>\n\t\t\t\t\t\t{u === user && '### '}\n\t\t\t\t\t\t{u}\n\t\t\t\t\t\t{u === user && ' ###'}\n\t\t\t\t\t</Button>\n\t\t\t\t))}\n\t\t\t</Row>\n\t\t\t{/*  */}\n\t\t\t<Divider />\n\t\t\t{/*  */}\n\t\t\t<Row>\n\t\t\t\t{events.map(e => {\n\t\t\t\t\tconst isFavorited = userFaves.includes(e)\n\t\t\t\t\tconst count = allFaves[e] ?? 0\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Button key={e} onClick={() => toggleFavorite(e, !isFavorited)}>\n\t\t\t\t\t\t\t{isFavorited ? `### ${e} (${count}) ###` : `${e} (${count})`}\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t)\n\t\t\t\t})}\n\t\t\t</Row>\n\t\t\t{/*  */}\n\t\t\t<Divider />\n\t\t\t{/*  */}\n\t\t\t<Button onClick={log}>Print Log</Button>\n\t\t\t<div>\n\t\t\t\t{/* <pre>{JSON.stringify(allFavResp.data, null, 2)}</pre> */}\n\t\t\t\t<pre>{JSON.stringify(allFaves, null, 2)}</pre>\n\t\t\t</div>\n\t\t</NonScrollWrapper>\n\t)\n}\n\nexport default memo(Temp)\n\n/*\nDUMP\n\n\t// Basic User Favorite Query\n\tconst userFavRef = ref(database, `temp-favorites/user1`)\n\t// const userFavQuery = query(userFavRef)\n\t// const userFavQuery = query(userFavRef, Fire.orderByValue())\n\tconst userFavResp = useDatabaseObjectData(userFavRef, {\n\t\t// idField: 'id',\n\t})\n\t// const userFavResp = useDatabaseListData(userFavQuery, {\n\t// \tidField: 'id',\n\t// })\n\n*/\n\n/*\n\n  // Get a key for a new Post.\n  const newPostKey = push(child(ref(db), 'posts')).key;\n\n  // Write the new post's data simultaneously in the posts list and the user's post list.\n  const updates = {};\n  updates['/posts/' + newPostKey] = postData;\n  updates['/user-posts/' + uid + '/' + newPostKey] = postData;\n\n  return update(ref(db), updates);\n\n\t*/\n\n/*\n\tfunction toggleStar(uid) {\n  const db = getDatabase();\n  const postRef = ref(db, '/posts/foo-bar-123');\n\n  runTransaction(postRef, (post) => {\n    if (post) {\n      if (post.stars && post.stars[uid]) {\n        post.starCount--;\n        post.stars[uid] = null;\n      } else {\n        post.starCount++;\n        if (!post.stars) {\n          post.stars = {};\n        }\n        post.stars[uid] = true;\n      }\n    }\n    return post;\n  });\n}\n*/\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["Wrapper","name","class","StyledButton","Link","Button","props","isLink","to","href","isButton","type","as","onClick","memo","NonScrollWrapper","PageTitle","List","ListItem","Section","Row","Divider","events","users","Temp","useState","user","setUser","database","useDatabase","userFavQ","useMemo","userFavRef","ref","userFavQuery","query","orderByValue","equalTo","userFavResp","useDatabaseObjectData","userFaves","status","data","Object","keys","toggleFavorite","useCallback","id","newState","set","allFavRef","allFavResp","useDatabaseListData","idField","allFaves","reduce","forEach","key","Number","log","console","map","u","e","isFavorited","includes","count","JSON","stringify"],"sourceRoot":""}