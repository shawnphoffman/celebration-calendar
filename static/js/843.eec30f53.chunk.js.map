{"version":3,"file":"static/js/843.eec30f53.chunk.js","mappings":"gRAEaA,GAAgB,eAAAC,KAAAA,mBAAAC,MAAAA,aAUhBC,GAAS,cAAAF,KAAAA,YAAAC,MAAAA,aAITE,GAAI,cAAAH,KAAAA,OAAAC,MAAAA,aAMJG,GAAQ,cAAAJ,KAAAA,WAAAC,MAAAA,YAKRI,GAAO,eAAAL,KAAAA,UAAAC,MAAAA,Y,+HCZdK,GAAG,eAAAN,KAAAA,MAAAC,MAAAA,YAQHM,GAAI,OAAUC,EAAAA,GAAV,EAAAR,KAAAA,OAAAC,MAAAA,aAgBJQ,EAAO,WAIZ,OAAwBC,EAAAA,EAAAA,MAAfC,GAAT,eAASA,UAEHC,GAAWC,EAAAA,EAAAA,MAoCXC,GAAYC,EAAAA,EAAAA,IAAIH,EAAD,kBACfI,GAAaC,EAAAA,EAAAA,IAAoBH,EAAW,CACjDI,QAAS,OAGJC,GAAWC,EAAAA,EAAAA,UAAQ,WACxB,MAA2B,aAAb,OAAVJ,QAAU,IAAVA,OAAAA,EAAAA,EAAYK,SAAwB,OAACL,QAAD,IAACA,GAAAA,EAAYM,KAC9CN,EAAWM,KAAKC,QAAO,SAACC,EAAMC,GAOpC,OALAC,OAAOC,KAAKF,GAAMG,SAAQC,SAAAA,GACC,MAAR,SAAdJ,EAAKI,KACRL,EAAKK,GAAOC,OAAM,UAACN,EAAKK,UAAN,QAAc,MAAQ,MAGnCL,IACL,IAT+D,KAUhE,QAACR,QAAD,IAACA,OAAD,EAACA,EAAYM,KAAb,OAAmBN,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAYK,SASlC,OACC,SAAC,KAAD,UACEK,OAAOC,KAAKR,GAAUY,KAAIC,SAAAA,GAAK,MACzBC,EAAK,UAAGd,EAASa,UAAZ,QAAkB,EAC7B,OACC,SAAC1B,EAAD,WACC,SAACC,EAAD,CAAM2B,GAAA,iBAAcF,GAApB,mBAA6BC,EAA7B,eAAyCD,EAAzC,oBAA+CrB,QAA/C,IAA+CA,OAA/C,EAA+CA,EAAWwB,MAAKC,SAAAA,GAAC,OAAIA,EAAEC,KAAOL,KAAGM,YADvEN,SAqCf,WAAeR,EAAAA,EAAAA,MAAKf,G,qCCnJpB,c,4BCAA","sources":["components/styles.js","pages/Temp.js","webpack://celebration-calendar/./src/components/styles.js?5064","webpack://celebration-calendar/./src/pages/Temp.js?3893"],"sourcesContent":["import { styled } from 'linaria/react'\n\nexport const NonScrollWrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tmargin: 0;\n\tpadding: 0 16px;\n\twidth: 100%;\n\talign-items: center;\n\tflex: 0;\n`\n\nexport const PageTitle = styled.h2`\n\tmargin: 8px 0px 16px 0px;\n`\n\nexport const List = styled.ul`\n\tmargin: 0px;\n\tpadding-inline-start: 0px;\n\ttext-align: center;\n`\n\nexport const ListItem = styled.li`\n\tmargin-bottom: 16px;\n\tlist-style: none;\n`\n\nexport const Section = styled.div`\n\tmargin-bottom: 32px;\n\ttext-align: center;\n`\n","// import { memo, useCallback, useMemo, useState } from 'react'\n// import { Link } from 'react-router-dom'\n// import { useDatabase, useDatabaseListData, useDatabaseObjectData, useUser } from 'reactfire'\n// import { equalTo, orderByValue, query, ref, set } from 'firebase/database'\n// import { styled } from 'linaria/react'\nimport { memo, useMemo } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDatabase, useDatabaseListData } from 'reactfire'\nimport { ref } from 'firebase/database'\nimport { styled } from 'linaria/react'\n\n// import Button from 'components/Button'\nimport { NonScrollWrapper } from 'components/styles'\nimport { useEventContext } from 'context/EventContext'\n\nconst Row = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n\tfont-size: 18px;\n\tfont-weight: bold;\n\tpadding: 6px;\n`\nconst Lunk = styled(Link)`\n\tcolor: var(--link);\n\ttext-decoration: none;\n\t&:hover {\n\t\tcolor: var(--linkHover);\n\t}\n`\n\n// const Divider = styled.hr`\n// \twidth: 100%;\n// \tborder-color: red;\n// `\n\n// const events = ['event1', 'event2', 'event3', 'event4', 'event5']\n// const users = ['user1', 'user2', 'user3', 'user4']\n\nconst Temp = () => {\n\t// const { data: user } = useUser()\n\n\t// const [user, setUser] = useState(users[0])\n\tconst [{ allEvents }] = useEventContext()\n\n\tconst database = useDatabase()\n\n\t// ============================================================\n\n\t// User Favorites Query\n\t// const userFavQ = useMemo(() => {\n\t// \tconst userFavRef = ref(database, `user-favorites/${user?.uid}`)\n\t// \tconst userFavQuery = query(userFavRef, orderByValue())\n\t// \treturn query(userFavQuery, equalTo('true'))\n\t// }, [database, user])\n\n\t// User Favorites Resp\n\t// const userFavResp = useDatabaseObjectData(userFavQ, {})\n\n\t// User Favorite\n\t// const userFaves = useMemo(() => {\n\t// \tif (userFavResp?.status !== 'success' || !userFavResp?.data) return []\n\t// \treturn Object.keys(userFavResp?.data) || []\n\t// }, [userFavResp?.data, userFavResp?.status])\n\n\t// ============================================================\n\n\t// Add/Remove User Favorite\n\t// const toggleFavorite = useCallback(\n\t// \t(id, newState) => {\n\t// \t\tconst userFavRef = ref(database, `user-favorites/${user?.uid}/${id}`)\n\t// \t\t// set(userFavRef, `${newState}`)\n\t// \t\tset(userFavRef, newState ? 'true' : null)\n\t// \t\t// console.log('SET', { id, newState })\n\t// \t},\n\t// \t[database, user]\n\t// )\n\n\t// ============================================================\n\n\t// All Favorites Resp\n\tconst allFavRef = ref(database, `user-favorites`)\n\tconst allFavResp = useDatabaseListData(allFavRef, {\n\t\tidField: 'id',\n\t})\n\t// All Favorites Count\n\tconst allFaves = useMemo(() => {\n\t\tif (allFavResp?.status !== 'success' || !allFavResp?.data) return []\n\t\treturn allFavResp.data.reduce((memo, user) => {\n\t\t\t// console.log('USER', { user })\n\t\t\tObject.keys(user).forEach(key => {\n\t\t\t\tif (user[key] === 'true') {\n\t\t\t\t\tmemo[key] = Number(memo[key] ?? null) + 1\n\t\t\t\t}\n\t\t\t})\n\t\t\treturn memo\n\t\t}, {})\n\t}, [allFavResp?.data, allFavResp?.status])\n\n\t// ============================================================\n\n\t// HELPERS\n\t// const log = useCallback(() => {\n\t// \tconsole.log('allFavResp.data', allFavResp)\n\t// }, [allFavResp])\n\n\treturn (\n\t\t<NonScrollWrapper>\n\t\t\t{Object.keys(allFaves).map(e => {\n\t\t\t\tconst count = allFaves[e] ?? 0\n\t\t\t\treturn (\n\t\t\t\t\t<Row key={e}>\n\t\t\t\t\t\t<Lunk to={`/event/${e}`}>{`${count} - [${e}] ${allEvents?.find(x => x.id === e).summary}`}</Lunk>\n\t\t\t\t\t</Row>\n\t\t\t\t)\n\t\t\t})}\n\t\t\t{/*  */}\n\t\t\t{/* <Row>\n\t\t\t\t{users.map(u => (\n\t\t\t\t\t<Button key={u} onClick={() => setUser(u)}>\n\t\t\t\t\t\t{u === user && '### '}\n\t\t\t\t\t\t{u}\n\t\t\t\t\t\t{u === user && ' ###'}\n\t\t\t\t\t</Button>\n\t\t\t\t))}\n\t\t\t</Row> */}\n\t\t\t{/*  */}\n\t\t\t{/* <Divider /> */}\n\t\t\t{/*  */}\n\t\t\t{/* <Row>\n\t\t\t\t{Object.keys(allFaves).map(e => {\n\t\t\t\t\tconst isFavorited = userFaves.includes(e)\n\t\t\t\t\tconst count = allFaves[e] ?? 0\n\t\t\t\t\treturn <Button key={e}>{`${e} (${count})`}</Button>\n\t\t\t\t})}\n\t\t\t</Row> */}\n\t\t\t{/*  */}\n\t\t\t{/* <Divider /> */}\n\t\t\t{/*  */}\n\t\t\t{/* <Button onClick={log}>Print Log</Button> */}\n\t\t\t{/* <div> */}\n\t\t\t{/* <pre>{JSON.stringify(allFavResp.data, null, 2)}</pre> */}\n\t\t\t{/* <pre>{JSON.stringify(allFaves, null, 2)}</pre> */}\n\t\t\t{/* </div> */}\n\t\t</NonScrollWrapper>\n\t)\n}\n\nexport default memo(Temp)\n\n/*\nDUMP\n\n\t// Basic User Favorite Query\n\tconst userFavRef = ref(database, `temp-favorites/user1`)\n\t// const userFavQuery = query(userFavRef)\n\t// const userFavQuery = query(userFavRef, Fire.orderByValue())\n\tconst userFavResp = useDatabaseObjectData(userFavRef, {\n\t\t// idField: 'id',\n\t})\n\t// const userFavResp = useDatabaseListData(userFavQuery, {\n\t// \tidField: 'id',\n\t// })\n\n*/\n\n/*\n\n  // Get a key for a new Post.\n  const newPostKey = push(child(ref(db), 'posts')).key;\n\n  // Write the new post's data simultaneously in the posts list and the user's post list.\n  const updates = {};\n  updates['/posts/' + newPostKey] = postData;\n  updates['/user-posts/' + uid + '/' + newPostKey] = postData;\n\n  return update(ref(db), updates);\n\n\t*/\n\n/*\n\tfunction toggleStar(uid) {\n  const db = getDatabase();\n  const postRef = ref(db, '/posts/foo-bar-123');\n\n  runTransaction(postRef, (post) => {\n    if (post) {\n      if (post.stars && post.stars[uid]) {\n        post.starCount--;\n        post.stars[uid] = null;\n      } else {\n        post.starCount++;\n        if (!post.stars) {\n          post.stars = {};\n        }\n        post.stars[uid] = true;\n      }\n    }\n    return post;\n  });\n}\n*/\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["NonScrollWrapper","name","class","PageTitle","List","ListItem","Section","Row","Lunk","Link","Temp","useEventContext","allEvents","database","useDatabase","allFavRef","ref","allFavResp","useDatabaseListData","idField","allFaves","useMemo","status","data","reduce","memo","user","Object","keys","forEach","key","Number","map","e","count","to","find","x","id","summary"],"sourceRoot":""}