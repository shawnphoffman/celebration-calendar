{"version":3,"file":"static/js/848.64d6d498.chunk.js","mappings":"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","sources":["components/Button.js","components/auth/UserProfile.js","pages/Login.js","webpack://celebration-calendar/./src/components/Button.js?ee67","webpack://celebration-calendar/./src/components/auth/UserProfile.js?211c"],"sourcesContent":["import { memo } from 'react'\nimport { Link } from 'react-router-dom'\nimport { styled } from 'linaria/react'\n\nconst Wrapper = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n`\n\nconst StyledButton = styled(Link)`\n\tcolor: var(--inputBg);\n\tbackground: var(--linkActive);\n\tborder: 2px solid var(--inputBorder);\n\tfont-weight: 700;\n\tborder-radius: 8px;\n\ttext-align: center;\n\tdisplay: inline-block;\n\n\t&:hover {\n\t\tcolor: var(--inputBg);\n\t\tbackground: var(--linkHover);\n\t}\n\n\tmargin: 8px;\n\tfont-size: 20px;\n\tpadding: 8px 16px;\n\tmin-width: 175px;\n\n\ttext-decoration: none;\n\tcursor: pointer;\n`\n\nconst Button = props => {\n\tconst isLink = !!props.to || !!props.href\n\tconst isButton = props.type === 'submit'\n\n\tconst as = isLink ? Link : isButton ? 'button' : 'div'\n\treturn (\n\t\t<Wrapper onClick={() => {}}>\n\t\t\t<StyledButton as={as} {...props} />\n\t\t</Wrapper>\n\t)\n}\n\nexport default memo(Button)\n","import { memo, useCallback, useMemo } from 'react'\nimport { useAuth } from 'reactfire'\nimport * as Panelbear from '@panelbear/panelbear-js'\nimport { styled } from 'linaria/react'\n\nimport Button from 'components/Button'\nimport Event from 'utils/events'\n\nconst Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n`\nconst Username = styled.div`\n\tfont-size: 32px;\n\tfont-weight: bold;\n\tmargin-top: 16px;\n\ttext-align: center;\n`\nconst PhoneIcon = styled.i`\n\tfont-size: 48px;\n`\nconst PhoneNumber = styled.div`\n\tfont-size: 28px;\n\tfont-weight: bold;\n\tmargin-top: 16px;\n\ttext-align: center;\n`\nconst Avatar = styled.img`\n\tmargin: 16px;\n\theight: 48px;\n\twidth: 48px;\n\tborder: 3px solid #fff;\n\tbox-sizing: content-box;\n\tborder-radius: 8px;\n`\n\nconst UserProfile = ({ user }) => {\n\tconst auth = useAuth()\n\n\tconst handleLogout = useCallback(() => {\n\t\tauth.signOut().then(() => {\n\t\t\tPanelbear.track(Event.LogOut)\n\t\t\tconsole.log('signed out')\n\t\t})\n\t}, [auth])\n\n\t// console.log({ user })\n\n\tconst provider = useMemo(() => {\n\t\treturn user?.providerData[0]?.providerId\n\t}, [user?.providerData])\n\n\treturn (\n\t\t<Wrapper>\n\t\t\t{provider === 'phone' ? (\n\t\t\t\t<>\n\t\t\t\t\t<PhoneIcon className=\"fa-solid fa-mobile-screen-button fa-beat\" />\n\t\t\t\t\t<PhoneNumber>{user.providerData[0].phoneNumber}</PhoneNumber>\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<Username>{user.displayName}</Username>\n\t\t\t\t\t<Avatar className=\"fa-beat\" src={user.photoURL} alt=\"pfp\" />\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t<div>\n\t\t\t\t<Button onClick={handleLogout}>Logout</Button>\n\t\t\t</div>\n\t\t</Wrapper>\n\t)\n}\n\nexport default memo(UserProfile)\n","import { memo, useCallback } from 'react'\nimport { useAuth, useSigninCheck, useUser } from 'reactfire'\nimport * as Panelbear from '@panelbear/panelbear-js'\nimport { RecaptchaVerifier, signInWithPhoneNumber, signInWithPopup, TwitterAuthProvider } from 'firebase/auth'\n\nimport UserProfile from 'components/auth/UserProfile'\nimport Button from 'components/Button'\nimport Loading from 'components/Loading'\nimport Event from 'utils/events'\n\nconst signInTwitter = async auth => {\n\tPanelbear.track(Event.LogIn)\n\tconst provider = new TwitterAuthProvider()\n\tawait signInWithPopup(auth, provider)\n}\n\nconst signInPhone = async auth => {\n\tconst appVerifier = new RecaptchaVerifier(\n\t\t'recaptcha-container',\n\t\t{\n\t\t\tcallback: response => {\n\t\t\t\tconsole.log({ response })\n\t\t\t\tsignInWithPhoneNumber(auth, '+13176040325', appVerifier)\n\t\t\t\t\t.then(confirmationResult => {\n\t\t\t\t\t\tconsole.log({ confirmationResult })\n\t\t\t\t\t\tdebugger\n\t\t\t\t\t\tconfirmationResult\n\t\t\t\t\t\t\t.confirm('123456')\n\t\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\t\t// User signed in successfully.\n\t\t\t\t\t\t\t\tconsole.log({ result })\n\t\t\t\t\t\t\t\t// const user = result.user\n\t\t\t\t\t\t\t\tdebugger\n\t\t\t\t\t\t\t\t// ...\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\t\tconsole.log({ error })\n\t\t\t\t\t\t\t\tdebugger\n\t\t\t\t\t\t\t\t// User couldn't sign in (bad verification code?)\n\t\t\t\t\t\t\t\t// ...\n\t\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\tconsole.log({ e })\n\t\t\t\t\t\tdebugger\n\t\t\t\t\t})\n\t\t\t},\n\t\t},\n\t\tauth\n\t)\n\n\t// const widgetId = await appVerifier.render()\n\t// window.recaptchaWidgetId = widgetId\n}\n\nconst Login = () => {\n\tconst { status, data: signInCheckResult } = useSigninCheck()\n\tconst auth = useAuth()\n\tconst { data: user } = useUser()\n\n\tconst handlePhone = useCallback(async () => {\n\t\tawait signInPhone(auth)\n\t}, [auth])\n\n\tif (status === 'loading') {\n\t\treturn <Loading />\n\t}\n\n\tconst { signedIn } = signInCheckResult\n\n\tif (signedIn === true) {\n\t\treturn (\n\t\t\t<UserProfile user={user} />\n\t\t\t// linkWithCredential\n\t\t)\n\t} else {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Button onClick={() => signInTwitter(auth)}>\n\t\t\t\t\tLogin with Twitter&nbsp;\n\t\t\t\t\t<i className=\"fa-brands fa-twitter\"></i>\n\t\t\t\t</Button>\n\t\t\t\t{process.env.NODE_ENV === 'development' && (\n\t\t\t\t\t<Button onClick={handlePhone}>\n\t\t\t\t\t\tLogin with Phone&nbsp;\n\t\t\t\t\t\t<i className=\"fa-solid fa-mobile-screen-button\"></i>\n\t\t\t\t\t</Button>\n\t\t\t\t)}\n\t\t\t\t<div id=\"recaptcha-container\"></div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default memo(Login)\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["Wrapper","name","class","StyledButton","Link","Button","props","isLink","to","href","isButton","type","as","onClick","memo","Username","PhoneIcon","PhoneNumber","Avatar","UserProfile","user","auth","useAuth","handleLogout","useCallback","signOut","then","Panelbear","Event","console","log","provider","useMemo","providerData","providerId","className","phoneNumber","displayName","src","photoURL","alt","signInTwitter","TwitterAuthProvider","signInWithPopup","signInPhone","appVerifier","RecaptchaVerifier","callback","response","signInWithPhoneNumber","confirmationResult","confirm","result","catch","error","e","Login","useSigninCheck","status","signInCheckResult","data","useUser","Loading","signedIn","process","id"],"sourceRoot":""}